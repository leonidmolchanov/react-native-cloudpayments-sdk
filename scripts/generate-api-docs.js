#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏–∑ JSDoc –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
 * –°–æ–∑–¥–∞–µ—Ç Markdown —Ñ–∞–π–ª—ã –¥–ª—è Docusaurus –Ω–∞ –æ—Å–Ω–æ–≤–µ TypeScript —Ç–∏–ø–æ–≤
 */

const fs = require('fs');
const path = require('path');

// –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
const SRC_DIR = path.join(__dirname, '../src');
const DOCS_DIR = path.join(__dirname, '../docs/docs/api');
const TYPES_DIR = path.join(SRC_DIR, 'types');

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
if (!fs.existsSync(DOCS_DIR)) {
  fs.mkdirSync(DOCS_DIR, { recursive: true });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è JSDoc –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
function extractJSDoc(content) {
  const jsdocRegex = /\/\*\*([\s\S]*?)\*\//g;
  const matches = [];
  let match;

  while ((match = jsdocRegex.exec(content)) !== null) {
    matches.push(match[1]);
  }

  return matches;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JSDoc
function parseJSDoc(jsdoc) {
  const lines = jsdoc.split('\n').map((line) => line.replace(/^\s*\*\s?/, ''));

  const result = {
    description: '',
    params: [],
    returns: '',
    example: '',
    since: '',
    deprecated: false,
  };

  let currentSection = 'description';
  let currentExample = [];

  for (const line of lines) {
    if (line.startsWith('@param')) {
      currentSection = 'params';
      const paramMatch = line.match(/@param\s+\{([^}]+)\}\s+(\w+)\s*-?\s*(.*)/);
      if (paramMatch) {
        result.params.push({
          type: paramMatch[1],
          name: paramMatch[2],
          description: paramMatch[3],
        });
      }
    } else if (line.startsWith('@returns') || line.startsWith('@return')) {
      currentSection = 'returns';
      result.returns = line.replace(/@returns?\s*/, '');
    } else if (line.startsWith('@example')) {
      currentSection = 'example';
      currentExample = [];
    } else if (line.startsWith('@since')) {
      result.since = line.replace(/@since\s*/, '');
    } else if (line.startsWith('@deprecated')) {
      result.deprecated = true;
    } else if (currentSection === 'description' && line.trim()) {
      result.description += line + '\n';
    } else if (currentSection === 'example') {
      currentExample.push(line);
    }
  }

  if (currentExample.length > 0) {
    result.example = currentExample.join('\n');
  }

  return result;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Markdown
function generateMarkdown(title, content, jsdocs) {
  let markdown = `---
sidebar_position: 1
---

# ${title}

${content}

`;

  // –î–æ–±–∞–≤–ª—è–µ–º JSDoc –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
  jsdocs.forEach((jsdoc, index) => {
    const parsed = parseJSDoc(jsdoc);

    if (parsed.description) {
      markdown += `## –û–ø–∏—Å–∞–Ω–∏–µ

${parsed.description.trim()}

`;
    }

    if (parsed.params.length > 0) {
      markdown += `## –ü–∞—Ä–∞–º–µ—Ç—Ä—ã

| –ü–∞—Ä–∞–º–µ—Ç—Ä | –¢–∏–ø | –û–ø–∏—Å–∞–Ω–∏–µ |
|----------|-----|----------|
`;
      parsed.params.forEach((param) => {
        markdown += `| \`${param.name}\` | \`${param.type}\` | ${param.description} |\n`;
      });
      markdown += '\n';
    }

    if (parsed.returns) {
      markdown += `## –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç

${parsed.returns}

`;
    }

    if (parsed.example) {
      markdown += `## –ü—Ä–∏–º–µ—Ä

\`\`\`typescript
${parsed.example}
\`\`\`

`;
    }

    if (parsed.since) {
      markdown += `> **–î–æ—Å—Ç—É–ø–Ω–æ —Å –≤–µ—Ä—Å–∏–∏:** ${parsed.since}

`;
    }

    if (parsed.deprecated) {
      markdown += `> ‚ö†Ô∏è **–£—Å—Ç–∞—Ä–µ–ª–æ:** –≠—Ç–æ—Ç API —É—Å—Ç–∞—Ä–µ–ª –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω –≤ –±—É–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö.

`;
    }
  });

  return markdown;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function generateAPIDocs() {
  console.log('üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...');

  // –°–æ–∑–¥–∞–µ–º –æ–±–∑–æ—Ä–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
  const overviewContent = `---
sidebar_position: 1
---

# API Reference

–ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API –¥–ª—è CloudPayments React Native SDK.

## –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏

- [PaymentService](./payment-service) ‚Äî –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏
- [CardService](./card-service) ‚Äî –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ä—Ç–∞–º–∏
- [–•—É–∫–∏](./hooks/use-payment-form) ‚Äî React —Ö—É–∫–∏ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
- [–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö](./types/payment-data) ‚Äî TypeScript —Ç–∏–ø—ã –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
- [–°–æ–±—ã—Ç–∏—è](./events/payment-form) ‚Äî –°–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π SDK

## –ë—ã—Å—Ç—Ä—ã–µ —Å—Å—ã–ª–∫–∏

- [usePaymentForm](./hooks/use-payment-form) ‚Äî –û—Å–Ω–æ–≤–Ω–æ–π —Ö—É–∫ –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π
- [IPaymentData](./types/payment-data) ‚Äî –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞
- [EPaymentFormEventName](./types/enums) ‚Äî –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π

## –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

### –ë–∞–∑–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂

\`\`\`typescript
import { usePaymentForm } from '@lm/react-native-cloudpayments';

const presentPaymentForm = usePaymentForm('pk_test_your_public_id');

const result = await presentPaymentForm({
  amount: '1000.00',
  currency: 'RUB',
  description: '–ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞'
});
\`\`\`

### –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π

\`\`\`typescript
import { eventEmitter, EPaymentFormEventName } from '@lm/react-native-cloudpayments';

eventEmitter.addListener(EPaymentFormEventName.PAYMENT_FORM, (event) => {
  console.log('–°–æ–±—ã—Ç–∏–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Ñ–æ—Ä–º—ã:', event);
});
\`\`\`
`;

  fs.writeFileSync(path.join(DOCS_DIR, 'overview.md'), overviewContent);

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã —Ç–∏–ø–æ–≤
  const typeFiles = [
    'events.ts',
    'enums.ts',
    'paymentData.ts',
    'responses.ts',
    'services.ts',
  ];

  typeFiles.forEach((file) => {
    const filePath = path.join(TYPES_DIR, file);
    if (fs.existsSync(filePath)) {
      const content = fs.readFileSync(filePath, 'utf8');
      const jsdocs = extractJSDoc(content);

      const fileName = path.basename(file, '.ts');
      const title = fileName.charAt(0).toUpperCase() + fileName.slice(1);

      const markdown = generateMarkdown(
        title,
        `–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–ª—è ${title}`,
        jsdocs
      );

      const outputPath = path.join(DOCS_DIR, 'types', `${fileName}.md`);
      fs.mkdirSync(path.dirname(outputPath), { recursive: true });
      fs.writeFileSync(outputPath, markdown);

      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω ${outputPath}`);
    }
  });

  console.log('üéâ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞!');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
if (require.main === module) {
  generateAPIDocs();
}

module.exports = { generateAPIDocs };
